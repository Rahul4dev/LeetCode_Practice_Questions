1. // Monotonic Array: Monotonic Increasing and Monotonic Decreasing i.e, constantly increasing or decreasing: Checking by returning boolean:

function monoArray(arr) {
    if(arr.length < 2) {
        return true;
    } else {
        if ( arr[0] <= arr[arr.length - 1]) {
            //arr can be MI
            for(let i=0;i<arr.length;i++) {
                if (arr[i] > arr[i+1]){
                    return false
                } 
            }                
        }
        if ( arr[0] > arr[arr.length - 1]){
            for(let i=0;i<arr.length;i++) {
                if (arr[i] < arr[i+1]){
                    return false
                } 
            }
        }
        
    }
    return true;
}

let a = [1,2,3];
let b = [5,3,4];
let c = [-1,1,1];
let d = [1,2,2];
let e = [];
let f = [1];
let g = [1,2,4,3];
let h = [5,6,3,4,2];
let i = [2,2,2,2,2,3,2];

console.log(monoArray(a));  // true
console.log(monoArray(b));  // False
console.log(monoArray(c));  // true
console.log(monoArray(d));  // true
console.log(monoArray(e));  // true
console.log(monoArray(f));  // true
console.log(monoArray(g));  // false
console.log(monoArray(h));  // false
console.log(monoArray(i));  // false

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2. 1929 // print array two times in a new array

function copyArray(nums) {
     const ans = new Array(2*nums.length).fill(0);
    for(i=0; i<nums.length ; i++){       
        ans[i] = ans[i + nums.length] = nums[i];               
    }
    return ans;    
}

let a = [1,2,1];
console.log(copyArray(a)); // [1,2,1,1,2,1]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. 1480 // Running Sum of an array:
function runSumArr(nums) {
    for(i=0;i<nums.length -1;i++) {
        nums[i+1] += nums[i];
    }
    return nums;
}

let a= [1,2,3,4];
let b = [1,1,1,1];
console.log(runSumArr(a));  // [1,3,6,10]
console.log(runSumArr(b));  // [1,2,3,4]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

1470. Shuffle the Array:
i/p = [2,5,1,3,4,7];
o/p = [2,3,5,4,1,7];

Using 3 approaches we can shuffle the array...

function shuffleArray(array,n) {
    const newArray = new Array(array.length);
    if( array.length % 2 !== 0 || array.length !== 2*n) return -1;
    for (let i = 0, j = n, x = 0; x < array.length ; i++,j++ ){
        
        newArray[x++] = array[i];
        newArray[x++] = array[j];
    }
    return newArray;
}
O(n)T
O(n)S

-------------------------
function shuffleArray(array,mid) {
    const newArray = new Array(array.length);
    let x =0;
    for(let i=0;i<mid;i++){
        newArray[x] = array[i];
        x += 2;
    }
    x = 1;
    for(let i=mid; i<array.length; i++) {
        newArray[x] = array[i];
        x += 2;
    }
    return newArray;
}
O(n)T
O(n)S
-----------------------------
function shuffleArray(array,n) {
    const newArray = new Array(array.length);
    if( array.length % 2 !== 0 || array.length !== 2*n) return -1;
    for (let i = 0, i < n ; i++){
        
        newArray[2 * i] = array[i];
        newArray[2 * i + 1] = array[j];
    }
    return newArray;
}
O(n)T
O(n)S

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2011. Final value of variable after performing OPerations:
i/p = ["--X","X++","X++"];
X= 0;
o/p: 1;

function opsArray(operations) {
    let X = 0;
    for(let i = 0; i < operations.length; i++) {
        const operator = operations[i][1];
        if(operator === '+') {
            X++;
        } else if(operator === '-') {
            X--;
        }
    }
    return X;
    
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
1920. Build an array from permutation:
Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]

var buildArray = function(nums) {
   const ans = new Array(nums.length).fill(0);
   for(i=0;i<=nums.length-1;i++){
       ans[i] = nums[nums[i]];
   }
   return ans;
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
